(function(){"use strict";function m(t,e){let n;for(const s of t)if(s.name===e[0]&&s.type==="folder"){n=s;break}for(let s=1;s<e.length&&(n!=null&&n.children);s++){const r=n.children.find(a=>a.name===e[s]&&a.type==="folder");if(!r)return null;n=r}return n||null}function k(t,e){const n=m(t,["Kiosk Documents","Default"]),s=(n==null?void 0:n.children)||[],r=e.reduce((d,i)=>{const c=m(t,["Kiosk Documents",i]);return c!=null&&c.children&&d.push(...c.children),d},[]),a=[...s,...r],o=Array.from(new Map(a.map(d=>[d.name,d])).values());return N(o)}function x(t){var s;const e=m(t,["Idle Screen","Default"]);return((s=e==null?void 0:e.children)==null?void 0:s.filter(r=>r.type==="file"&&r.mimeType.startsWith("image/")))||[]}function O(t,e){const n=k(t,e),s=x(t),r=[...n,...s],a=r.filter(o=>o.hasThumbnail).map(o=>({...o,id:`thumb_${o.id}`,name:`thumbnail_${o.name}`}));return[...r,...a]}function C(t){const e=t.match(/^(\d+)\s*-\s*/);return e?parseInt(e[1],10):Number.MAX_SAFE_INTEGER}function N(t){return[...t].sort((e,n)=>{const s=C(e.name),r=C(n.name);return s===r?e.name.localeCompare(n.name):s-r})}const h=(t,e)=>e.some(n=>t instanceof n);let F,B;function $(){return F||(F=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function U(){return B||(B=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const g=new WeakMap,w=new WeakMap,f=new WeakMap;function V(t){const e=new Promise((n,s)=>{const r=()=>{t.removeEventListener("success",a),t.removeEventListener("error",o)},a=()=>{n(u(t.result)),r()},o=()=>{s(t.error),r()};t.addEventListener("success",a),t.addEventListener("error",o)});return f.set(e,t),e}function W(t){if(g.has(t))return;const e=new Promise((n,s)=>{const r=()=>{t.removeEventListener("complete",a),t.removeEventListener("error",o),t.removeEventListener("abort",o)},a=()=>{n(),r()},o=()=>{s(t.error||new DOMException("AbortError","AbortError")),r()};t.addEventListener("complete",a),t.addEventListener("error",o),t.addEventListener("abort",o)});g.set(t,e)}let y={get(t,e,n){if(t instanceof IDBTransaction){if(e==="done")return g.get(t);if(e==="store")return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return u(t[e])},set(t,e,n){return t[e]=n,!0},has(t,e){return t instanceof IDBTransaction&&(e==="done"||e==="store")?!0:e in t}};function v(t){y=t(y)}function _(t){return U().includes(t)?function(...e){return t.apply(p(this),e),u(this.request)}:function(...e){return u(t.apply(p(this),e))}}function H(t){return typeof t=="function"?_(t):(t instanceof IDBTransaction&&W(t),h(t,$())?new Proxy(t,y):t)}function u(t){if(t instanceof IDBRequest)return V(t);if(w.has(t))return w.get(t);const e=H(t);return e!==t&&(w.set(t,e),f.set(e,t)),e}const p=t=>f.get(t);function K(t,e,{blocked:n,upgrade:s,blocking:r,terminated:a}={}){const o=indexedDB.open(t,e),d=u(o);return s&&o.addEventListener("upgradeneeded",i=>{s(u(o.result),i.oldVersion,i.newVersion,u(o.transaction),i)}),n&&o.addEventListener("blocked",i=>n(i.oldVersion,i.newVersion,i)),d.then(i=>{a&&i.addEventListener("close",()=>a()),r&&i.addEventListener("versionchange",c=>r(c.oldVersion,c.newVersion,c))}).catch(()=>{}),d}const R=["get","getKey","getAll","getAllKeys","count"],z=["put","add","delete","clear"],b=new Map;function P(t,e){if(!(t instanceof IDBDatabase&&!(e in t)&&typeof e=="string"))return;if(b.get(e))return b.get(e);const n=e.replace(/FromIndex$/,""),s=e!==n,r=z.includes(n);if(!(n in(s?IDBIndex:IDBObjectStore).prototype)||!(r||R.includes(n)))return;const a=async function(o,...d){const i=this.transaction(o,r?"readwrite":"readonly");let c=i.store;return s&&(c=c.index(d.shift())),(await Promise.all([c[n](...d),r&&i.done]))[0]};return b.set(e,a),a}v(t=>({...t,get:(e,n,s)=>P(e,n)||t.get(e,n,s),has:(e,n)=>!!P(e,n)||t.has(e,n)}));const G=["continue","continuePrimaryKey","advance"],S={},D=new WeakMap,A=new WeakMap,X={get(t,e){if(!G.includes(e))return t[e];let n=S[e];return n||(n=S[e]=function(...s){D.set(this,A.get(this)[e](...s))}),n}};async function*J(...t){let e=this;if(e instanceof IDBCursor||(e=await e.openCursor(...t)),!e)return;e=e;const n=new Proxy(e,X);for(A.set(n,e),f.set(n,p(e));e;)yield n,e=await(D.get(n)||e.continue()),D.delete(n)}function L(t,e){return e===Symbol.asyncIterator&&h(t,[IDBIndex,IDBObjectStore,IDBCursor])||e==="iterate"&&h(t,[IDBIndex,IDBObjectStore])}v(t=>({...t,get(e,n,s){return L(e,n)?J:t.get(e,n,s)},has(e,n){return L(e,n)||t.has(e,n)}}));const l={dbName:"document-viewer-cache",stores:{files:"files",metadata:"metadata"},version:2},T={baseUrl:"https://kdv-gdriveproxy.onrender.com/api"};class Q{constructor(e){this.db=e}async getFile(e){try{const n=await this.db.get(l.stores.files,e);return n?URL.createObjectURL(n.blob):null}catch(n){return console.error("Error getting cached file:",n),null}}async getMetadata(e){try{return await this.db.get(l.stores.metadata,e)||null}catch(n){return console.error("Error getting file metadata:",n),null}}async needsUpdate(e){try{const n=await this.getMetadata(e.id);return!n||n.versionHash!==e.versionHash}catch(n){return console.error("Error checking file update:",n),!0}}async downloadAndCache(e){const n=performance.now();try{const s=e.hasThumbnail&&e.id.startsWith("thumb_")?`${T.baseUrl}/files/${e.id.replace("thumb_","")}/thumbnail`:`${T.baseUrl}/files/${e.id}/preview`,r=await fetch(s);if(!r.ok)throw new Error(`Failed to download ${e.name}`);const a=await r.blob(),o=performance.now(),d=a.size/((o-n)/1e3),i=this.db.transaction([l.stores.files,l.stores.metadata],"readwrite"),c={blob:a,versionHash:e.versionHash,timestamp:Date.now()},M={versionHash:e.versionHash,timestamp:Date.now()};return await Promise.all([i.objectStore(l.stores.files).put(c,e.id),i.objectStore(l.stores.metadata).put(M,e.id)]),await i.done,{blob:a,speed:d}}catch(s){throw console.error("Error downloading file:",s),s}}}let I=null;async function E(){if(!I){const t=await K(l.dbName,l.version,{upgrade(e,n){e.objectStoreNames.contains(l.stores.files)||e.createObjectStore(l.stores.files),e.objectStoreNames.contains(l.stores.metadata)||e.createObjectStore(l.stores.metadata)}});I=new Q(t)}return I}async function j(t){return(await E()).needsUpdate(t)}async function Y(t){return(await E()).downloadAndCache(t)}async function Z(){await E()}Z(),self.onmessage=async t=>{const{files:e,tags:n}=t.data;self.postMessage({type:"status",message:"Analyzing files..."});const s=O(e,n);let r=s.length,a=0,o=0,d=0;for(const i of s)self.postMessage({type:"status",message:`Checking file: ${i.name}`}),await j(i)&&d++;if(d===0){self.postMessage({type:"status",message:"All files up to date"}),self.postMessage({type:"complete"});return}self.postMessage({type:"status",message:`Downloading ${d} files...`});for(const i of s)try{if(await j(i)){const{speed:M}=await Y(i);o+=M}a++,r--,self.postMessage({type:"progress",fileName:i.name,remaining:r,speed:o/a,progress:a/s.length*100})}catch(c){console.error("Error processing file:",c),self.postMessage({type:"error",message:c instanceof Error?c.message:"Failed to cache file"})}self.postMessage({type:"complete"})}})();
